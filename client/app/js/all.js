angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage;
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = '../app/assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = '../app/assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = '../app/assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = '../app/assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'client/app/assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'client/app/assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('musicApp', []);
// var musicApp = angular.module('musicApp', []);

// musicApp.factory('spotifySearch', ['$http', '$q', function ($http, $q) {
//     var deferred = $q.defer();
//     var search = {};
//     // console.log(query)
//     search.makeRequest = function (input) {
//       var query = JSON.stringify({queryInput: input})
//       // console.log(query);
//       $http({
//         data: query,
//         url: 'http://localhost:3000/spotify',
//         method: 'POST',
//       }).then(function success (response) {
//         deferred.resolve(response)
//         console.log(response);     
//       })
//       return deferred.promise;  
//     } 
//     return search;
//   }])

// angular.module('musicApp', [])
//   .controller('scController',  ['$scope', function ($scope) {
//       vm = this;
//       vm.test = 'this is sc';
//   }])
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = [];
    vm.playState = {
      playing: true;
      button: {{play icon}}
    }
    vm.togglePlay = function () {
      if (vm.playState === true) {

      }
    }
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = [];
    vm.playState = {
      playing: true;
      button: {{play icon}}
    }
    vm.togglePlay = function () {
      if (vm.playState === true) {

      }
    }
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = [];
    // vm.playState = {
    //   playing: true;
    //   button: {{play icon}}
    // }
    vm.togglePlay = function () {
      if (vm.playState === true) {

      }
    }
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = [];
    // vm.playState = {
    //   playing: true;
    //   button: {{play icon}}
    // }
    vm.togglePlay = function () {
      if (vm.playState === true) {

      }
    }
    vm.digest = function () {
      $scope.$digest()
    }
    $scope.spotifyQuery;
    $scope.scQuery;
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = playerControls.togglePlay();
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true;
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        return 'play icon'
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = playerControls.togglePlay();
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true;
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        return 'play icon'
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = playerControls.togglePlay();
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        return 'play icon'
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = playerControls.togglePlay();
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        return 'play icon'
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        masterPlayer.playState = false;
        vm.togglePlayButton = 'pause icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        masterPlayer.playState = false;
        vm.togglePlayButton = 'pause icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'pause icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'pause icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: true
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {
      
    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {
      
    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {
      
    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {
      
    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {

    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
      masterPlayer.togglePlay() 
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {

    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
      masterPlayer.togglePlay() 
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {

    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
      masterPlayer.togglePlay() 
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
      masterPlayer.togglePlay() 
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {

    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
      masterPlayer.togglePlay() 
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
      masterPlayer.togglePlay() 
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play() 
    masterPlayer.togglePlay()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
      masterPlayer.togglePlay() 
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {

    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
      masterPlayer.togglePlay() 
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
      masterPlayer.togglePlay() 
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';
    vm.togglePlay = function () {

    }
    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()
      masterPlayer.togglePlay() 
    }
    $scope.pauseMusic = function () {
      playerControls.pause()
      masterPlayer.togglePlay() 
    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playSpotifyMusic = function (song) {
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = eachSong.urlSource;
          vm.digest()
        }               
      })
    masterPlayer.play()         
    }

    masterPlayer.playSoundCloud = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
          vm.digest();
        }               
      })
      masterPlayer.play()
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song')
          if (event.target.getAttribute('data-company') === 'sc') {
            scope.playSoundCloud(song);
          }
          if (event.target.getAttribute('data-company') === 'spotify') {
            scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      })
      masterPlayer.play()
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playSoundCloud(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      })
      masterPlayer.play()
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playSoundCloud(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      })
      masterPlayer.play()
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      })
      masterPlayer.play()
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          }
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          // scope.playMusic(song);
          console.log('playing')
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          // scope.playMusic(song);
          console.log('playing')
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.play()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.playMusic()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.playMusic()

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.playMusic();
      console.log('playing')

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.playMusic();
      console.log('playing')

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.playMusic();

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      console.log('playing')
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function () {      
      playerControls.playMusic();

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      console.log('playing')
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = () => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (eachSong) {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (eachSong) {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (eachSong) => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (eachSong) => {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            console.log(eachSong)
            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            console.log(eachSong)
            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            console.log(eachSong)
            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            console.log(eachSong)
            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        console.log(eachSong)
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            
            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        console.log(eachSong)
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {
            
            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {

            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = function (eachSong) {

            // if (eachSong.company === 'sc') {
            //   return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            // }
            // else if (eachSong.company === 'sc') {
            //   return eachSong.urlSource;
            // }
          }
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {

            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {

            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            if (eachSong.company === 'sc') {
              return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
            }
            else if (eachSong.company === 'sc') {
              return eachSong.urlSource;
            }
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song) {
      if (eachSong.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
      }
      else if (eachSong.company === 'spotify') {
        return eachSong.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song) {
      if (eachSong.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
      }
      else if (eachSong.company === 'spotify') {
        return eachSong.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + scClient;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + scClient;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = (function (eachSong) {
            console.log(eachSong)
            
          }())
        vm.digest()
        masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, client);
          vm.digest()
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, client);
          vm.digest()
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest()
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {

        if (eachSong.name === song) {
          // console.log(eachSong)
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest()
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (eachSong.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.togglePlayButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    $scope.pauseMusic = function () {
      playerControls.pause()

    }

    $scope.playSoundCloud = function (song) {
      playerControls.playSoundCloud(song);  
    }
    $scope.playSpotifyMusic = function (song) {
      playerControls.playSpotifyMusic(song);   
    } 

    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();

    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.togglePlayButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.togglePlayButton = 'play icon';
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play()
        // (masterPlayer.playState === false) ? 
        }
      })
    }

    // masterPlayer.playSpotifyMusic = function (song) {
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = eachSong.urlSource;
    //       vm.digest()
    //     }               
    //   })
    // masterPlayer.play()         
    // }

    // masterPlayer.playSoundCloud = function (song) {
    //   var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
    //   _.each(vm.tracks, function (eachSong) {
    //     if (eachSong.name === song) {
    //       vm.playerImage = eachSong.image;
    //       vm.playerTitle = eachSong.name;
    //       vm.playerArtist = eachSong.artist;
    //       vm.playerInfo = eachSong.album;
    //       masterPlayer.src = 'https://api.soundcloud.com/tracks/' + eachSong.urlSource + '/stream?client_id=' + scClient;
    //       vm.digest();
    //     }               
      // })
    //   masterPlayer.play()
    // }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });

        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
          // if (event.target.getAttribute('data-company') === 'sc') {
          //   scope.playSoundCloud(song);
          // }
          // if (event.target.getAttribute('data-company') === 'spotify') {
          //   scope.playSpotifyMusic(song);
          })
      
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
      })
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
      })
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  }

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  }

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          this.play();
          this.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          this.play();
          this.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          audio.play();
          this.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          audio.play();
          this.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          this.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          this.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (this.playState.playing === false) {
        this.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (this.playState.playing === true) {
        this.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (this.playState.playing === false) {
        audio.play();
        this.toggleState();
      }
      if (this.playState.playing === true) {
        audio.pause();
        this.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      console.log('play clicked');
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      console.log('play clicked');
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      console.log('play clicked');
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      console.log('play clicked');
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
         masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.play();
          masterPlayer.toggleState();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          console.log(masterPlayer.playState)
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          console.log(masterPlayer.playState)
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          console.log(masterPlayer.playState)
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          console.log(masterPlayer.playState)
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing = false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          console.log(masterPlayer.playState)
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing = false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          console.log(masterPlayer.playState)
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing = false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing = false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing === true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing === true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        console.log('reached state')
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ?  masterPlayer.togglePlay(): return;
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ?  masterPlayer.togglePlay(): return;
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          if (masterPlayer.playState.playing === false) {masterPlayer.togglePlay()} 
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          if (masterPlayer.playState.playing === false) {masterPlayer.togglePlay()} 
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          masterPlayer.togglePlay();
          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
      console.log('toggling play')
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        // vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        // vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        // vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        // vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      if (masterPlayer.playState.playing === false) {
        masterPlayer.play();
        masterPlayer.toggleState();
        return 
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.pause();
        masterPlayer.toggleState();
        return 
      }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      (masterPlayer.playState.playing === false) ? masterPlayer.play(); : masterPlayer.pause();
      masterPlayer.toggleState();


      // if (masterPlayer.playState.playing === false) {
      //   masterPlayer.play();
      //   masterPlayer.toggleState();
      //   return 
      // }
      // if (masterPlayer.playState.playing === true) {
      //   masterPlayer.pause();
      //   masterPlayer.toggleState();
      //   return 
      // }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      (masterPlayer.playState.playing === false) ? masterPlayer.play(); : masterPlayer.pause();
      masterPlayer.toggleState();


      // if (masterPlayer.playState.playing === false) {
      //   masterPlayer.play();
      //   masterPlayer.toggleState();
      //   return 
      // }
      // if (masterPlayer.playState.playing === true) {
      //   masterPlayer.pause();
      //   masterPlayer.toggleState();
      //   return 
      // }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();


      // if (masterPlayer.playState.playing === false) {
      //   masterPlayer.play();
      //   masterPlayer.toggleState();
      //   return 
      // }
      // if (masterPlayer.playState.playing === true) {
      //   masterPlayer.pause();
      //   masterPlayer.toggleState();
      //   return 
      // }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
      if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        console.log(masterPlayer.playState)
        vm.digest();
        return
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();


      // if (masterPlayer.playState.playing === false) {
      //   masterPlayer.play();
      //   masterPlayer.toggleState();
      //   return 
      // }
      // if (masterPlayer.playState.playing === true) {
      //   masterPlayer.pause();
      //   masterPlayer.toggleState();
      //   return 
      // }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);
          vm.digest();
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();          
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();


      // if (masterPlayer.playState.playing === false) {
      //   masterPlayer.play();
      //   masterPlayer.toggleState();
      //   return 
      // }
      // if (masterPlayer.playState.playing === true) {
      //   masterPlayer.pause();
      //   masterPlayer.toggleState();
      //   return 
      // }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      if (masterPlayer.src === '') {return};
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();


      // if (masterPlayer.playState.playing === false) {
      //   masterPlayer.play();
      //   masterPlayer.toggleState();
      //   return 
      // }
      // if (masterPlayer.playState.playing === true) {
      //   masterPlayer.pause();
      //   masterPlayer.toggleState();
      //   return 
      // }
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient)
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient)
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks)
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks)
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';

      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';

      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (masterPlayer.src === '') {
        return
      }
      else if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf(0))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf(0))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.indexOf(1) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.indexOf(1) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(m.tracks.indexOf(1))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(m.tracks.indexOf(1))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf(1))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf(1))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf(song))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf(song))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf('song'))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.indexOf('song'))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.find(function (element) {element===true})
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.find(function (element) {element===true})
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.find(function (element) {element===true}))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.find(function (element) {element===true}))
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.length> 1)
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      console.log(vm.tracks.length> 1)
      if (vm.tracks.indexOf(0) === true && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src === companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      }      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        console.log(masterPlayer.src);
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;
        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;
        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);

    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])


.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';

    vm.digest = function () {
      $scope.$digest()
    }

    vm.togglePlay = function () {
      playerControls.togglePlay();
    }
    
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;
        vm.digest();        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;
        vm.digest();        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle;
    vm.playerArtist;
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }
    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])


.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo;
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo = 'album';
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo = 'album';
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo = 'album';
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo = 'album';
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])
angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo = 'album';
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


angular.module('home', ['ngRoute'])

.config(['$routeProvider', function ($routeProvider) {
  $routeProvider. 
    when('/music', {
      template: 'music.html'
    }).
    otherwise({redirectTo: '/'})
}])

.controller('hero', ['$scope', function ($scope) {
  // $scope.video = "/assets/video/sun.mp4";
  $scope.poster = "/assets/images/home/poster.jpg";
}])



.directive('heroVideo', function () {
  return {
    restrict: 'E', 
    replace: false,
    template: '<video loop muted poster={{poster}} autoplay=true>' +
                '<source type=video/mp4 src= {{video}}>' +
              '</video>'
  }
})
angular.module('musicApp', []);
angular.module('musicApp', [])

.controller('musicPlayer', ['$scope','$http', 'spotifySearch', 'playerControls', 'scSearch',
  function ($scope, $http, spotifySearch, playerControls, scSearch) {
    vm = this; 
    vm.playerImage = 'assets/images/music-player/default-album.png';
    vm.playerTitle = 'Title';
    vm.playerArtist = 'Artist';
    vm.playerInfo = 'album';
    vm.tracks = []; 
    $scope.spotifyQuery;
    $scope.scQuery;   
    vm.playStateButton = 'play icon';
    vm.digest = function () {
      $scope.$digest()
    }
    vm.togglePlay = function () {
      playerControls.togglePlay();
    }   
    $scope.playMusic = function (song) {      
      playerControls.playMusic(song);
    }    
    $scope.scSearch = function () {
      scSearch.allTracks($scope.scQuery);
      $scope.scQuery = "";
    }
    $scope.scSearchEnter = function () {
      if (event.keyCode === 13) {
        scSearch.allTracks($scope.scQuery);
        $scope.scQuery = "";
      };
    }
    $scope.spotifySearch = function () {
      spotifySearch.makeRequest($scope.spotifyQuery);
      $scope.spotifyQuery = "";
    }
    $scope.spotifySearchEnter = function () {
      if (event.keyCode === 13) {
        spotifySearch.makeRequest($scope.spotifyQuery);
        $scope.spotifyQuery = "";
      }
    }    
  }])

.service('songConstructor', [function () {
  function song (name, image, album, artist, duration, company, fetchSource, urlSource, pageSource) {
    this.name = name;
    this.image = image;
    this.album = album;
    this.artist = artist;
    this.duration = duration;
    this.company = company; 
    this.fetchSource = fetchSource;
    this.urlSource = urlSource;
    this.pageSource = pageSource;
  }
  return song; 
}])

.factory('spotifySearch', ['$http', 'songConstructor', function ($http, songConstructor) {
    var search = {};
    search.makeRequest = function (input) {
      var query = JSON.stringify({queryInput: input})
      vm.tracks = [];
      $http({
        data: query,
        url: 'http://localhost:3000/spotify',
        method: 'POST',
      }).then(function success (response) {
       
        trackResults = response.data.tracks.items;
        _.map(trackResults, function (each) {
          vm.tracks.push(
            new songConstructor(each.name, each.album.images[2].url, each.album.name, each.artists[0].name, each.duration_ms, 'spotify', null, each.preview_url, each.external_urls.spotify)
          );
        })  
      }) 
    } 
    return search;
  }])

.factory('scSearch', ['songConstructor', function (songConstructor) {
  var search = {}; 

  search.allTracks = function (input) {
    var query = input;
    
    function getUrl (urlStream) {
      // console.log(urlStream);
      if (urlStream.length === 50) {
        return urlStream.slice(-16, -7);
      }
      else if (urlStream.length === 49) {
        return urlStream.slice(-15, -7)
      }
    }

    SC.get('/tracks', {q: query, limit: 20}).then(function(tracks) { 
      vm.tracks = [];    
      var trackResults = tracks; 
      
      _.map(trackResults, function (each) {
        var stream = each.stream_url;
        var url = getUrl(stream);
        // console.log(stream);
        // console.log(url);        
        vm.tracks.push(new songConstructor(each.title, each.artwork_url, each.album, each.user.username, each.duration, 'sc', each.stream_url, url, each.permalink_url))
        vm.digest()
      });
    })    
  };
  return search
}])

.factory('playerControls', [function () { 
    var masterPlayer = new Audio();
    function companyBrand (song, client) {
      if (song.company === 'sc') {
        return 'https://api.soundcloud.com/tracks/' + song.urlSource + '/stream?client_id=' + client;
      }
      else if (song.company === 'spotify') {
        return song.urlSource;
      }
    };

    masterPlayer.playState = {
      playing: false
    }

    masterPlayer.toggleState = function () {
      if (masterPlayer.playState.playing === false) {
        masterPlayer.playState.playing = true;
        vm.playStateButton = 'pause icon';
      }
      else if (masterPlayer.playState.playing === true) {
        masterPlayer.playState.playing = false;
        vm.playStateButton = 'play icon';
        
      }
    }

    masterPlayer.togglePlay = function () {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      if (vm.tracks.length > 1 && masterPlayer.src === '') {
        masterPlayer.src = companyBrand(vm.tracks[0], scClient);
        vm.playerImage = vm.tracks[0].image;
        vm.playerTitle = vm.tracks[0].name;
        vm.playerArtist = vm.tracks[0].artist;
        vm.playerInfo = vm.tracks[0].album;        
      }
      else if (masterPlayer.src === '') {
        return
      };      
      (masterPlayer.playState.playing === false) ? masterPlayer.play() : masterPlayer.pause();
      masterPlayer.toggleState();
    }

    masterPlayer.playMusic = function (song) {
      var scClient = 'b10a9e77003de676a40bcd4ce7346f03';
      _.each(vm.tracks, function (eachSong) {
        if (eachSong.name === song) {
          vm.playerImage = eachSong.image;
          vm.playerTitle = eachSong.name;
          vm.playerArtist = eachSong.artist;
          vm.playerInfo = eachSong.album;
          masterPlayer.src = companyBrand(eachSong, scClient);          
          (masterPlayer.playState.playing === false) ? masterPlayer.togglePlay() : masterPlayer.play();
          vm.digest();
        }
      })
    }
    return masterPlayer
  }])

.directive('songList', () => {
    return {
      scope: true,
      restrict: 'A',
      replace: false,
      template: '<li class="songs" ng-repeat= "track in player.tracks" ng-click="song-select" data-song = {{track.name}} data-company ={{track.company}}>' +
                '<img ng-src="{{track.image}}"/> {{track.name}} {{track.artist}} {{track.album}}' +
                '</li>',
      link: function (scope, elem, attrs) {
        elem.bind('click', function (event) {
          var song = event.target
          $('.songs').removeClass('highlight');
          song.classList.add('highlight');
        });
        elem.bind('dblclick', function (event) {
          var song = event.target.getAttribute('data-song');
          scope.playMusic(song);
        })
      }
    }
  })

SC.initialize({
  client_id: 'b10a9e77003de676a40bcd4ce7346f03'
})
































         


var navApp = angular.module('nav', []);

navApp.controller('navigator', ['$scope', function ($scope) {
  
}])